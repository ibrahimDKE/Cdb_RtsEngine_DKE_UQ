/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visualization;
import cdb.Cdb_Gui;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.sql.SQLException;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.general.AbstractDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
/**
 *
 * @author himos
 */
public class VisualizationForm extends javax.swing.JFrame {

    /**
     * Creates new form VisualizationForm
     */
    public VisualizationForm(String tbl,String whr1,String whr2, TableModel m) {
        initComponents();
        
        jTextField1.setText(tbl);
        jTextField2.setText(whr1);
        jTextField3.setText(whr2);
        jTextField4.setText(Cdb_Gui.jComboBox1.getSelectedItem().toString());
                jTable2.setModel(m);
    }

    private VisualizationForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setTitle("Data Visualization");

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Results:");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Prevoius Results:");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Area Chart", "Bar Chart", "Bar Chart 3D", "Line Chart", "Line Chart 3D", "Stacked Area Chart", "Stacked Bar Chart", "Stacked Bar Chart 3D", " " }));
        jComboBox1.setSelectedIndex(1);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.setAutoCreateRowSorter(true);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable2);
        jTable2.setAutoCreateRowSorter(true);

        jTextField1.setVisible(false);
        jTextField1.setEditable(false);
        jTextField1.setText("jTextField1");

        jTextField2.setVisible(false);
        jTextField2.setEditable(false);
        jTextField2.setText("jTextField1");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setVisible(false);
        jTextField3.setText("jTextField1");

        jTextField11.setVisible(false);
        jTextField11.setText("jTextField1");

        jTextField12.setVisible(false);
        jTextField12.setText("jTextField1");

        jTextField13.setVisible(false);
        jTextField13.setText("jTextField1");

        jLabel3.setForeground(new java.awt.Color(0, 119, 255));
        jLabel3.setText("Q=");

        jLabel4.setForeground(new java.awt.Color(0, 119, 255));
        jLabel4.setText("Table :");

        jLabel5.setForeground(new java.awt.Color(0, 119, 255));
        jLabel5.setText("D=");

        jTextField4.setVisible(false);
        jTextField4.setEditable(false);
        jTextField4.setText("jTextField1");

        jTextField14.setVisible(false);
        jTextField14.setText("jTextField1");

        jLabel6.setForeground(new java.awt.Color(0, 119, 255));
        jLabel6.setText("Metric:");

        jLabel7.setForeground(new java.awt.Color(207, 41, 158));
        jLabel7.setText("Chart Type:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel7)
                        .addGap(26, 26, 26)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(163, 163, 163)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(181, 181, 181)
                                        .addComponent(jLabel5)))
                                .addGap(0, 732, Short.MAX_VALUE)))))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(6, 6, 6)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(28, 28, 28))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       
        
       TableModel newm=Cdb_Gui.jTable1.getModel();
       String tablename=Cdb_Gui.jComboBox2.getSelectedItem().toString();
       String whr1=Cdb_Gui.jTextArea1.getText();
       String whr2=Cdb_Gui.jTextArea2.getText();
       
        whr1=whr1.substring( whr1.indexOf("where"),whr1.length());
         if(!whr2.isEmpty()||!whr2.equals("")){
        whr2=whr2.substring( whr2.indexOf("where"),whr2.length());
         }else {whr2="";}
         
         jTable1.setModel(jTable2.getModel());
         jTextField11.setText(jTextField1.getText());
         jTextField12.setText(jTextField2.getText());
         jTextField13.setText(jTextField3.getText());
         jTextField14.setText(jTextField4.getText());
         
         jTable2.setModel(newm);
         jTextField1.setText(tablename);
         jTextField2.setText(whr1);
         jTextField3.setText(whr2);
         jTextField4.setText(Cdb_Gui.jComboBox1.getSelectedItem().toString());
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        int currRow=jTable2.getSelectedRow();
        String Viewname=jTable2.getModel().getValueAt(currRow,0 ).toString();
        String fun=jTable2.getModel().getValueAt(currRow,3 ).toString();
        //System.out.println(Viewname+",,"+fun);
        String dim=Viewname.substring(0, Viewname.indexOf("__"));
        String meas=Viewname.substring( Viewname.indexOf("__")+2,Viewname.length());
        String StmtQ="Select "+dim +" , "+fun+"("+meas+") from "+jTextField1.getText()+" "+jTextField2.getText()+" group by "+dim +" order by "+dim;
        String StmtD="Select "+dim +" , "+fun+"("+meas+") from "+jTextField1.getText()+" "+jTextField3.getText()+" group by "+dim+" order by "+dim;
//        System.out.println(dim+" , "+meas);
//        System.out.println(StmtQ);
//        System.out.println(StmtD);
        drawGraphMultipleDB(fun, StmtQ, StmtD, dim, meas,  jComboBox1.getSelectedItem().toString());
        jLabel4.setText("Table:"+jTextField1.getText());
        jLabel3.setText("Q:"+jTextField2.getText());
        if(!jTextField3.getText().isEmpty()||!jTextField3.getText().equals("")){
        jLabel5.setText("D:"+jTextField3.getText());}else{
            jLabel5.setText("D:Entire Database");}
         jLabel6.setText("Metric:"+jTextField4.getText());
        
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int currRow=jTable1.getSelectedRow();
        String Viewname=jTable1.getModel().getValueAt(currRow,0 ).toString();
        String fun=jTable1.getModel().getValueAt(currRow,3 ).toString();
        //System.out.println(Viewname+",,"+fun);
        String dim=Viewname.substring(0, Viewname.indexOf("__"));
        String meas=Viewname.substring( Viewname.indexOf("__")+2,Viewname.length());
        String StmtQ="Select "+dim +" , "+fun+"("+meas+") from "+jTextField11.getText()+" "+jTextField12.getText()+" group by "+dim;
        String StmtD="Select "+dim +" , "+fun+"("+meas+") from "+jTextField11.getText()+" "+jTextField13.getText()+" group by "+dim;
//        System.out.println(dim+" , "+meas);
//        System.out.println(StmtQ);
//        System.out.println(StmtD);
        drawGraphMultipleDB( fun, StmtQ, StmtD, dim, meas,  jComboBox1.getSelectedItem().toString());
        jLabel4.setText("Table:"+jTextField11.getText());
        jLabel3.setText("Q:"+jTextField12.getText());
        if(!jTextField13.getText().isEmpty()||!jTextField13.getText().equals("")){
        jLabel5.setText("D:"+jTextField13.getText());}else{
            jLabel5.setText("D:Entire Database");}
        jLabel6.setText("Metric:"+jTextField14.getText());
    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
public void drawGraph(String file,String dim,String measure){
    
        {
        
             String query ="SELECT * FROM "+file;
              JDBCCategoryDataset dataset =null;
               JDBCCategoryDataset dataset2=null;
            try
                {
            dataset =new JDBCCategoryDataset("jdbc:relique:csv:/home/himos/Public/cdb_results","org.relique.jdbc.csv.CsvDriver","root","root");
            dataset2=new JDBCCategoryDataset("jdbc:relique:csv:/home/himos/Public/cdb_results","org.relique.jdbc.csv.CsvDriver","root","root");
                }
            
            catch (ClassNotFoundException e2) {
                    //TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            catch (SQLException e2) {
                    // TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            try
                {
                dataset.executeQuery(query);
                dataset2.executeQuery(query);
                    }
            catch (SQLException e1) {
                //TODO Auto-generated catch block
                e1.printStackTrace();
                                    }
            
            
            dataset.removeRow(1);
                 //   .removeColumn(3);
                JFreeChart chart = ChartFactory.createBarChart(file,dim,measure, dataset,PlotOrientation.VERTICAL,true,true,false);
                        jPanel1.removeAll();
                        CategoryPlot plot = (CategoryPlot)chart.getPlot();
                        CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
                        xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel = new ChartPanel(chart, false);
                       
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(chartPanel, BorderLayout.CENTER);
                       jPanel1.add(chartPanel);
                      
                       // Draw the second graph
                       dataset2.removeRow(0);
                       
                        JFreeChart chart2 = ChartFactory.createBarChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
                        jPanel2.removeAll();
                        CategoryPlot plot2 = (CategoryPlot)chart2.getPlot();
                        CategoryAxis xAxis2 = (CategoryAxis)plot2.getDomainAxis();
                        xAxis2.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel2 = new ChartPanel(chart2, false);
                       chartPanel2.setBackground(Color.BLUE);
                       chartPanel2.setForeground(Color.BLUE);
                       jPanel2.setLayout(new BorderLayout());
                       jPanel2.add(chartPanel2, BorderLayout.CENTER);
                       jPanel2.add(chartPanel2);
                        SwingUtilities.updateComponentTreeUI(this);
                
           }

}

public void drawGraphMultiple(String file,String dim,String measure, String ChartType){
    
        {
        
             String query ="SELECT * FROM "+file;
              JDBCCategoryDataset dataset =null;
               JDBCCategoryDataset dataset2=null;
            try
                {
            dataset =new JDBCCategoryDataset("jdbc:relique:csv:/home/himos/Public/cdb_results","org.relique.jdbc.csv.CsvDriver","root","root");
            dataset2=new JDBCCategoryDataset("jdbc:relique:csv:/home/himos/Public/cdb_results","org.relique.jdbc.csv.CsvDriver","root","root");
                }
            
            catch (ClassNotFoundException e2) {
                    //TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            catch (SQLException e2) {
                    // TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            try
                {
                dataset.executeQuery(query);
                dataset2.executeQuery(query);
                    }
            catch (SQLException e1) {
                //TODO Auto-generated catch block
                e1.printStackTrace();
                                    }
            
            
            dataset.removeRow(1);
                 //   .removeColumn(3);
            dataset2.removeRow(0);
             
            JFreeChart chart=null;
             JFreeChart chart2=null;
            if(ChartType.equals("Area Chart")){
                 chart = ChartFactory.createAreaChart(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createAreaChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Bar Chart")){
                 chart = ChartFactory.createBarChart(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createBarChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Bar Chart 3D")){
                 chart = ChartFactory.createBarChart3D(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createBarChart3D(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Line Chart")){
                 chart = ChartFactory.createLineChart(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createLineChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Line Chart 3D")){
                 chart = ChartFactory.createLineChart3D(file,dim,measure, dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createLineChart3D(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Stacked Area Chart")){
                 chart = ChartFactory.createStackedAreaChart(file, dim, measure, dataset, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
                 chart2 = ChartFactory.createStackedAreaChart(file, dim, measure, dataset2, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            }
            else  if(ChartType.equals("Stacked Bar Chart")){
                 chart = ChartFactory.createStackedBarChart(file, dim, measure, dataset, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
                 chart2 = ChartFactory.createStackedBarChart(file, dim, measure, dataset2, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            }
             else  if(ChartType.equals("Stacked Bar Chart 3D")){
                 chart = ChartFactory.createStackedBarChart3D(file, dim, measure, dataset, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
                 chart2 = ChartFactory.createStackedBarChart3D(file, dim, measure, dataset2, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            }
            
                //JFreeChart chart = ChartFactory.createBarChart(file,dim,measure, dataset,PlotOrientation.VERTICAL,true,true,false);
                        jPanel1.removeAll();
                        CategoryPlot plot = (CategoryPlot)chart.getPlot();
                        CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
                        xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel = new ChartPanel(chart, false);
                       
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(chartPanel, BorderLayout.CENTER);
                       jPanel1.add(chartPanel);
                      
                       // Draw the second graph
                       
                       //ChartFactory.createAreaChart(file, dim, measure, dataset2);
                        //JFreeChart chart2 = ChartFactory.createBarChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
                        jPanel2.removeAll();
                        CategoryPlot plot2 = (CategoryPlot)chart2.getPlot();
                        //plot2.setDomainGridlinePaint(Color.ORANGE);
                        //chart.setBackgroundPaint(Color.BLACK);
                       // chart.setBackgroundImageAlpha(2);
                        ChartUtilities.applyCurrentTheme(chart);
                        //ChartColor
                        CategoryAxis xAxis2 = (CategoryAxis)plot2.getDomainAxis();
                        xAxis2.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel2 = new ChartPanel(chart2, false);
                     //  chartPanel2.setBackground(Color.BLUE);
                      // chartPanel2.setForeground(Color.BLUE);
                       jPanel2.setLayout(new BorderLayout());
                       jPanel2.add(chartPanel2, BorderLayout.EAST);
                       jPanel2.add(chartPanel2);
                        SwingUtilities.updateComponentTreeUI(this);
                
           }

}

public void drawGraphMultipleDB(String file,String StmtQ,String StmtD,String dim,String measure, String ChartType){
    
        {
        
             String COlNames =dim+"__"+measure;
             //COlNames=getcolNames(COlNames,file);
             dim=dim.substring( dim.indexOf("_")+1,dim.length());
             measure=measure.substring(measure.indexOf("_")+1,measure.length());
              JDBCCategoryDataset dataset =null;
               JDBCCategoryDataset dataset2=null;
            try
                {
            //        "postgresql", "127.0.0.1/postgres", "postgres", "himos
            dataset =new JDBCCategoryDataset("jdbc:postgresql://127.0.0.1/postgres","org.postgresql.Driver","postgres","himos");
            dataset2 =new JDBCCategoryDataset("jdbc:postgresql://127.0.0.1/postgres","org.postgresql.Driver","postgres","himos");
            //dataset.executeQuery(StmtQ);
            //dataset2.executeQuery(StmtD);
                }
            
            catch (ClassNotFoundException e2) {
                    //TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            catch (SQLException e2) {
                    // TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            try
                {
                dataset.executeQuery(StmtQ);
                dataset2.executeQuery(StmtD);
                    }
            catch (SQLException e1) {
                //TODO Auto-generated catch block
                e1.printStackTrace();
                                    }
            file=file+"("+measure+") group by "+dim;
            
          //  dataset.removeRow(1);
                 //   .removeColumn(3);
          //  dataset2.removeRow(0);
             
            JFreeChart chart=null;
             JFreeChart chart2=null;
            if(ChartType.equals("Area Chart")){
                 chart = ChartFactory.createAreaChart(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createAreaChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Bar Chart")){
                 chart = ChartFactory.createBarChart(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createBarChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Bar Chart 3D")){
                 chart = ChartFactory.createBarChart3D(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createBarChart3D(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Line Chart")){
                 chart = ChartFactory.createLineChart(file, dim, measure,dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createLineChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Line Chart 3D")){
                 chart = ChartFactory.createLineChart3D(file,dim,measure, dataset,PlotOrientation.VERTICAL,true,true,false);
                 chart2 = ChartFactory.createLineChart3D(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
            }
            else  if(ChartType.equals("Stacked Area Chart")){
                 chart = ChartFactory.createStackedAreaChart(file, dim, measure, dataset, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
                 chart2 = ChartFactory.createStackedAreaChart(file, dim, measure, dataset2, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            }
            else  if(ChartType.equals("Stacked Bar Chart")){
                 chart = ChartFactory.createStackedBarChart(file, dim, measure, dataset, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
                 chart2 = ChartFactory.createStackedBarChart(file, dim, measure, dataset2, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            }
             else  if(ChartType.equals("Stacked Bar Chart 3D")){
                 chart = ChartFactory.createStackedBarChart3D(file, dim, measure, dataset, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
                 chart2 = ChartFactory.createStackedBarChart3D(file, dim, measure, dataset2, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            }
            
                //JFreeChart chart = ChartFactory.createBarChart(file,dim,measure, dataset,PlotOrientation.VERTICAL,true,true,false);
                        jPanel1.removeAll();
                        CategoryPlot plot = (CategoryPlot)chart.getPlot();
                        CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
                        xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel = new ChartPanel(chart, false);
                       
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(chartPanel, BorderLayout.CENTER);
                       jPanel1.add(chartPanel);
                      
                       // Draw the second graph
                       
                       //ChartFactory.createAreaChart(file, dim, measure, dataset2);
                        //JFreeChart chart2 = ChartFactory.createBarChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
                        jPanel2.removeAll();
                        CategoryPlot plot2 = (CategoryPlot)chart2.getPlot();
                        //plot2.setDomainGridlinePaint(Color.ORANGE);
                        //chart.setBackgroundPaint(Color.BLACK);
                       // chart.setBackgroundImageAlpha(2);
                        ChartUtilities.applyCurrentTheme(chart);
                        //ChartColor
                        CategoryAxis xAxis2 = (CategoryAxis)plot2.getDomainAxis();
                        xAxis2.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel2 = new ChartPanel(chart2, false);
                     //  chartPanel2.setBackground(Color.BLUE);
                      // chartPanel2.setForeground(Color.BLUE);
                       jPanel2.setLayout(new BorderLayout());
                       jPanel2.add(chartPanel2, BorderLayout.EAST);
                       jPanel2.add(chartPanel2);
                        SwingUtilities.updateComponentTreeUI(this);
                
           }

}

public void drawGraphOld(String file,String dim,String measure){
    
        {
        
        
             String query ="SELECT * FROM "+file;
              JDBCCategoryDataset dataset =null;
               JDBCCategoryDataset dataset2=null;
            try
                {
            dataset =new JDBCCategoryDataset("jdbc:relique:csv:/home/himos/Public/cdb_results_old","org.relique.jdbc.csv.CsvDriver","root","root");
            dataset2=new JDBCCategoryDataset("jdbc:relique:csv:/home/himos/Public/cdb_results_old","org.relique.jdbc.csv.CsvDriver","root","root");
                }
            
            catch (ClassNotFoundException e2) {
                    //TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            catch (SQLException e2) {
                    // TODO Auto-generated catch block
                    e2.printStackTrace();
                     }
            try
                {
                dataset.executeQuery(query);
                dataset2.executeQuery(query);
                    }
            catch (SQLException e1) {
                //TODO Auto-generated catch block
                e1.printStackTrace();
                                    }
            
            
            dataset.removeRow(1);
                 //   .removeColumn(3);
                JFreeChart chart = ChartFactory.createBarChart(file,dim,measure, dataset,PlotOrientation.VERTICAL,true,true,false);
                        jPanel1.removeAll();
                        CategoryPlot plot = (CategoryPlot)chart.getPlot();
                        CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
                        xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel = new ChartPanel(chart, false);
                       
                       jPanel1.setLayout(new BorderLayout());
                       jPanel1.add(chartPanel, BorderLayout.CENTER);
                       jPanel1.add(chartPanel);
                      
                       // Draw the second graph
                       dataset2.removeRow(0);
                       
                        JFreeChart chart2 = ChartFactory.createBarChart(file,dim,measure, dataset2,PlotOrientation.VERTICAL,true,true,false);
                        jPanel2.removeAll();
                        CategoryPlot plot2 = (CategoryPlot)chart2.getPlot();
                        CategoryAxis xAxis2 = (CategoryAxis)plot2.getDomainAxis();
                        xAxis2.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                       ChartPanel chartPanel2 = new ChartPanel(chart2, false);
                       chartPanel2.setBackground(Color.BLUE);
                       chartPanel2.setForeground(Color.BLUE);
                       jPanel2.setLayout(new BorderLayout());
                       jPanel2.add(chartPanel2, BorderLayout.CENTER);
                       jPanel2.add(chartPanel2);
                        SwingUtilities.updateComponentTreeUI(this);
                
           }

}





public String getcolNames2(String Filename){
    
        String dim=Filename.substring(0,Filename.indexOf("_"));
        String measure=Filename.substring(Filename.lastIndexOf("_")+1,Filename.length());
        String Temp=""; 
        if (dim.endsWith("-dim1")){ Temp="PlayerName";}
        else if (dim.endsWith("-dim2")){Temp="Age ";} 
        else if (dim.endsWith("-dim3")){
            Temp="Country";
        }
     else if (dim.endsWith("-dim4")){Temp="Year";}
     else if (dim.endsWith("-dim5")){Temp="CelebrationDate";}
     else if (dim.endsWith("-dim6")){Temp="Sport";}
     else {Temp=dim;}
        
        if (measure.endsWith("measure1")){ Temp=Temp+"__GoldenMedal";}
        else if (measure.endsWith("measure2")){Temp=Temp+"__SilverMedal ";} 
        else if (measure.endsWith("measure3")){Temp=Temp+"__PronzeMedal";}
        else if (measure.endsWith("measure4")){Temp=Temp+"__TotalMedal";}
        else {Temp=Temp+"__"+measure;}
        return Temp;
}

  public static String getcolNames(String Filename, String Tblname){
           
                String dim=Filename.substring(0,Filename.indexOf("_"));
                String measure=Filename.substring(Filename.lastIndexOf("_")+1,Filename.length());
                String Temp=""; 
            if (Tblname.equals("olympicathletes")){
    
                
        
                if (dim.endsWith("dim1")){ Temp="PlayerName";}
                else if (dim.endsWith("dim2")){Temp="Age";} 
                else if (dim.endsWith("dim3")){
                Temp="Country";
                }
                else if (dim.endsWith("dim4")){Temp="Year";}
                else if (dim.endsWith("dim5")){Temp="CelebrationDate";}
                else if (dim.endsWith("dim6")){Temp="Sport";}
                else {Temp=dim;}
        
                if (measure.endsWith("measure1")){ Temp=Temp+"__GoldenMedal";}
                else if (measure.endsWith("measure2")){Temp=Temp+"__SilverMedal";} 
                else if (measure.endsWith("measure3")){Temp=Temp+"__PronzeMedal";}
                else if (measure.endsWith("measure4")){Temp=Temp+"__TotalMedal";}
                else {Temp=Temp+"__"+measure;}
                
                } else if (Tblname.equals("votesus")){
                
                    if (dim.endsWith("dim1")){ Temp="CountyName";}
                else if (dim.endsWith("dim2")){Temp="Party1";} 
                else if (dim.endsWith("dim3")){
                Temp="Firstname1";
                }
                else if (dim.endsWith("dim4")){Temp="Lastname1";}
                else if (dim.endsWith("dim5")){Temp="Party2";}
                else if (dim.endsWith("dim6")){Temp="Firstname2";}
                else if (dim.endsWith("dim7")){Temp="Lastname2";}
                else {Temp=dim;}
        
                if (measure.endsWith("measure1")){ Temp=Temp+"__PrecinctsReporting";}
                else if (measure.endsWith("measure2")){Temp=Temp+"__TotalPrecincts";} 
                else if (measure.endsWith("measure3")){Temp=Temp+"__TotalVotes";}
                else if (measure.endsWith("measure4")){Temp=Temp+"__Votes1";}
                else if (measure.endsWith("measure5")){Temp=Temp+"__Votes2";}
                else {Temp=Temp+"__"+measure;}
                
                }
            
            else if (Tblname.equals("ontime")){
                
                    if (dim.endsWith("dim1")){ Temp="Month";}
                else if (dim.endsWith("dim2")){Temp="DayofWeek";} 
                else if (dim.endsWith("dim4")){
                Temp="UniqueCarrier";
                }
                else if (dim.endsWith("dim5")){Temp="flightnum";}
                else if (dim.endsWith("dim6")){Temp="Origin";}
                else if (dim.endsWith("dim7")){Temp="Dest";}
                else if (dim.endsWith("dim8")){Temp="CancelCode";}
                else {Temp=dim;}
        
                if (measure.endsWith("measure1")){ Temp=Temp+"__ActualElapsedTime";}
                else if (measure.endsWith("measure2")){Temp=Temp+"__SchedulElapsedTime";} 
                else if (measure.endsWith("measure3")){Temp=Temp+"__AirTime";}
                else if (measure.endsWith("measure4")){Temp=Temp+"__ArrivalDelay";}
                else if (measure.endsWith("measure5")){Temp=Temp+"__DepatureDelay";}
                else if (measure.endsWith("measure6")){Temp=Temp+"__Distance";}
                else if (measure.endsWith("measure7")){Temp=Temp+"__CarrierDelay";}
                else if (measure.endsWith("measure8")){Temp=Temp+"__WeatherDelay";}
                else if (measure.endsWith("measure9")){Temp=Temp+"__NASDelay";}
                else if (measure.endsWith("measure10")){Temp=Temp+"__SecurityDelay";}
                else if (measure.endsWith("measure11")){Temp=Temp+"__LateAirraftDelay";}
                
                else {Temp=Temp+"__"+measure;}
                
                }
            else {Temp=dim+"__"+measure;}
            return Temp;
        }
    

public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualizationForm().setVisible(true);
            }
        });
    }

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
